name: CI

on:
  release:
    types: [published]
  pull_request:
    branches: '**'
  push:
    branches:
      - master

jobs:
  docker-tags:
    runs-on: ubuntu-latest
    outputs:
      docker-tag: ${{ steps.step1.outputs.docker-tag }}
      release: ${{ steps.step1.outputs.release }}
      latest-release: ${{ steps.step1.outputs.latest-release }}
    steps:
      - id: step1
        run: |
          DOCKER_TAG=$GITHUB_REF_NAME

          if echo "$GITHUB_REF_NAME" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+$' ; then
            RELEASE="latest"
          elif echo "$GITHUB_REF_NAME" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+-rc\.[0-9]+$' ; then
            RELEASE="release-candidate"
          fi

          LATEST_RELEASE="$(
            git -c 'versionsort.suffix=-' ls-remote -t --exit-code --refs --sort=-v:refname "https://github.com/$GITHUB_REPOSITORY" '*' |
              sed -En '1!q;s/^[[:xdigit:]]+[[:space:]]+refs\/tags\/(.+)/\1/gp'
          )"

          echo "DOCKER_TAG: $DOCKER_TAG"
          echo "RELEASE: $RELEASE"
          echo "LATEST_RELEASE: $LATEST_RELEASE"

          echo "::set-output name=docker-tag::${DOCKER_TAG}"
          echo "::set-output name=release::${RELEASE}"
          echo "::set-output name=latest-release::${LATEST_RELEASE}"

  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Run a one-line script
      run: echo Hello, world!
    - name: Run a multi-line script
      run: |
        echo Add other actions to build,
        echo test, and deploy your project.

  image-build:
    runs-on: ubuntu-latest
    needs: [build, docker-tags]

    steps:
      - uses: actions/checkout@v2

      # -
      #   name: Login to GitHub Container Registry
      #   uses: docker/login-action@v2
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}

      # - name: Login to GitHub Container Registry
      #   uses: docker/login-action@v1
      #   with:
      #     registry: ghcr.io
      #     username: ${{ secrets.CR_USER }}
      #     password: ${{ secrets.CR_PAT }}

      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin

      -
        uses: docker/setup-buildx-action@v2
        id: buildx
        with:
          install: true

      - name: Unpack build
        run: |

      - name: Build Docker image for PRs
        run: |
          echo "WTF1 ${{needs.docker-tags.outputs.docker-tag}}"
          echo "WTF2 ${{needs.docker-tags.outputs.release}}"
          echo "WTF3 ${{needs.docker-tags.outputs.latest-release}}"

          LOWERCASE_REPOSITORY=$(echo "${{ github.repository_owner }}" | tr "[:upper:]" "[:lower:]")
          IMAGE_NAME="actions-playground"

          IMAGE_NAME="ghcr.io/${LOWERCASE_REPOSITORY}/${IMAGE_NAME}:pr-${{ github.event.number }}"

          echo "Build official Docker image ${IMAGE_NAME}"

          docker buildx build -t $IMAGE_NAME --cache-to /tmp/docker-cache .

          docker images

          ls -la /tmp/docker-cache

  image-usage:
    runs-on: ubuntu-latest
    needs: [image-build]
    steps:
      - name: Use image
        run: |
          LOWERCASE_REPOSITORY=$(echo "${{ github.repository_owner }}" | tr "[:upper:]" "[:lower:]")
          IMAGE_NAME="actions-playground"

          IMAGE_NAME="ghcr.io/${LOWERCASE_REPOSITORY}/${IMAGE_NAME}:pr-${{ github.event.number }}"

          docker images

          echo "IMAGE_NAME: ${IMAGE_NAME}"

          docker run $IMAGE_NAME
